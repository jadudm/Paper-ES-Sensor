#INCLUDE "plumbing.module"
#INCLUDE "eeprom.24LC256.module"
#INCLUDE "twi3.module"
#INCLUDE "pir.module"
#INCLUDE "chronodot.module"

VAL INT TEMP.SENSOR.PIN IS A1:
VAL INT LIGHT.SENSOR.PIN IS A0:
VAL INT PIR.POWER IS 5:
VAL INT PIR.SENSE IS 2:

VAL BYTE INIT.READING   IS 'I':
VAL BYTE CLOCK.READING  IS 'C':
VAL BYTE MOTION.READING IS 'M':

VAL INT LOG.TX IS TX0:
VAL INT LOG.PORT IS 0:

VAL INT ALERT.MOTION.IGNORE.PIN IS 9:
VAL INT ALERT.DATA.STORED.PIN IS 13:
VAL INT ALERT.STATUS.PIN IS 13:

VAL INT CLOCK.READ.MINUTES IS  5:
VAL INT MOTION.READ.MINUTES IS 2:

DATA TYPE READING
  RECORD
    BYTE hours:
    BYTE minutes:
    BYTE type:
    INT  temp:
    INT  light:
:

PROC alert.led (VAL INT pin)
  SEQ
    digital.write (pin, HIGH)
    delay(300)
    digital.write (pin, LOW)
:

INLINE PROC clear.clock.flags ()
  -- Clear alarm flags
  chronodot.write (#0F, #00)
:

PROC setup.clock ()
  SEQ
    -- Enable alarm interrupt
    chronodot.write (#0E, #1E)
    -- Clear alarm flags
    clear.clock.flags()
    -- Enable an alarm every minute, using Alarm 2.
    chronodot.write.many (#0B, [#80, #80, #80])
:

PROC real.clock (CHAN SIGNAL tick!)
  CHAN LEVEL intr:
  PAR
    digital.input (3, intr!)
    WHILE TRUE
      SEQ
        LEVEL any:
        intr ? any
        clear.clock.flags ()
        tick ! SIGNAL
:
 
PROC signal.delta (CHAN SIGNAL in?, o1!, o2!)
  WHILE TRUE
    SEQ
      in ? SIGNAL
      PAR
        o1 ! SIGNAL
        o2 ! SIGNAL
:

--{{{ PROC n.minute.ticker (VAL INT minutes, CHAN SIGNAL in?, out!)
-- Expects a SIGNAL on the channel 'in' every minute.
-- Generates a SIGNAL on the channel 'out' every 'num.minutes'.
PROC n.minute.ticker (VAL INT num.minutes, CHAN SIGNAL in?, out!)
  INITIAL INT counter IS num.minutes:
  WHILE TRUE
    SEQ
      in ? SIGNAL
      counter := counter - 1
      IF
        counter <> 0
          SKIP
        TRUE
          SEQ
            out ! SIGNAL
            counter := num.minutes
:

--{{{ PROC motion (SIGNAL s!)
-- Monitors the Modern Device PIR sensor.
-- A signal is generated on the channel 's'
-- whenever motion is detected.
INLINE PROC motion (CHAN SIGNAL s!)
  pir (PIR.SENSE, s!)
:
--}}}

PROC motion.throttle (CHAN SIGNAL motion?, reset?, out!)
  INITIAL BOOL IGNORING IS FALSE:
  WHILE TRUE
    ALT
      -- When the reset line fires, we can stop ignoring
      -- the motion sensor.
      reset ? SIGNAL
        IGNORING := FALSE
      -- If we are not ignoring the motion sensor, we should
      -- pass on the message that it fired, and then start
      -- ignoring it until the next reset comes in.
      NOT IGNORING & motion ? SIGNAL
        SEQ
          out ! SIGNAL
          IGNORING := TRUE
      -- We must be ignoring the motion sensor, so read in the 
      -- SIGNAL and then do nothing.
      IGNORING & motion ? SIGNAL
        alert.led (ALERT.MOTION.IGNORE.PIN)
:

PROC light.sensor (CHAN SIGNAL req?, CHAN INT resp!)
  adc (LIGHT.SENSOR.PIN, VCC, req?, resp!)
:

-- Output should end up in degrees C, and therefore
-- always within the range of a BYTE.
PROC convert.temp (CHAN INT in?, CHAN INT out!)
  WHILE TRUE
    INT32 lv:
    INT v:
    SEQ
      in ? v
      lv := (INT32 v)
      lv := (lv * 250) / 1024
      out ! (INT lv)
:

--}}}

PROC temp.sensor (CHAN SIGNAL req?, CHAN INT resp!)
  --CHAN INT raw:
  PAR
    adc (TEMP.SENSOR.PIN, VCC, req?, resp!)
    -- convert.temp (raw?, resp!)
: 

INLINE PROC trigger.initial.reading (CHAN SIGNAL s!)
  s ! SIGNAL
:

-- Generate initial packets continuously.
PROC init.packet (CHAN READING out!)
  WHILE TRUE
    READING r:
    SEQ
      r[hours]   := 0
      r[minutes] := 0
      r[type]    := 'X'
      r[light]   := 0
      r[temp]    := 0
      out ! r
:

PROC get.type (CHAN READING data.in?, data.out!,
               CHAN SIGNAL init?, motion?, clock?)
  WHILE TRUE
    READING r:
    SEQ
      -- Grab the packet
      data.in ? r
      -- Who asked for a reading?
      ALT
        init ? SIGNAL
          r[type] := INIT.READING
        motion ? SIGNAL
          r[type] := MOTION.READING
        clock ? SIGNAL
          r[type] := CLOCK.READING
      data.out ! r
:

PROC get.time (CHAN READING data.in?, data.out!)
  WHILE TRUE
    [3]BYTE smh:
    READING r:
    SEQ
      data.in ? r
      -- Raw brings in the time backwards.
      chronodot.get.time.raw (smh)
      r[hours] := smh[2]
      r[minutes] := smh[1]
      data.out ! r
:

PROC get.data (CHAN READING data.in?, data.out!)
  CHAN SIGNAL light.req, temp.req:
  CHAN INT light.resp, temp.resp:
  PAR
    light.sensor (light.req?, light.resp!)
    temp.sensor (temp.req?, temp.resp!)
    WHILE TRUE
      READING r:
      SEQ
        data.in ? r
        -- Get the light level
        light.req ! SIGNAL
        light.resp ? r[light]
        -- Get the temperature
        temp.req  ! SIGNAL
        temp.resp  ? r[temp]
        -- Send the data out
        data.out ! r
:

PROC serial.write.comma (VAL INT port)
  serial.write.byte (port, ',')
:

INLINE PROC serial.write.data.int (VAL INT port, VAL INT n)
  serial.write.int (port, n)
:

PROC display (CHAN READING data?)
  WHILE TRUE
    READING r:
    SEQ
      data ? r
      serial.write.data.int (LOG.TX, (INT r[hours]))
      serial.write.comma    (LOG.TX)
      serial.write.data.int (LOG.TX, (INT r[minutes]))
      serial.write.comma    (LOG.TX)
      serial.write.string   (LOG.TX, [r[type]])
      serial.write.comma    (LOG.TX)
      serial.write.data.int (LOG.TX, r[light])
      serial.write.comma    (LOG.TX)
      serial.write.data.int (LOG.TX, r[temp])
      serial.write.newline  (LOG.TX)
      alert.led (ALERT.DATA.STORED.PIN)
:

PROC main ()
  CHAN SIGNAL tick, motion.tick, clock.tick:
  CHAN SIGNAL read.init, read.clock:
  CHAN SIGNAL movement, motion.ok, read.movement:
  CHAN READING a, b, c, d:
  SEQ
    -- Set up alert LEDs
    digital.mode (ALERT.MOTION.IGNORE.PIN, OUTPUT)
    digital.mode (ALERT.DATA.STORED.PIN, OUTPUT)
    digital.mode (ALERT.STATUS.PIN, OUTPUT)
    
    -- Indicate that we're going through the init process.
    digital.write (ALERT.STATUS.PIN, HIGH)

    -- The OpenLog runs at 9600 by default.
    serial.start (LOG.PORT, 9600)
    -- Get the clock ready to go.
    setup.clock ()

    -- pir.init powers up the PIR and waits 5 seconds.
    pir.init (PIR.POWER, PIR.SENSE)

    -- Turn off the startup indicator.
    digital.write (ALERT.STATUS.PIN, LOW)

    PAR
      -- The clock ticks once per minute.
      real.clock (tick!)

      -- We drive the data pipeline by continuously generating
      -- RECORD structures. The pipeline stalls and waits
      -- for either movement, a clock event, or an initial event
      -- (which stores a reading at startup).
      init.packet (a!)
      get.type (a?, b!, read.init?, read.movement?, read.clock?)
      get.time (b?, c!)
      get.data (c?, d!)

      -- These tickers "slow down" the clock tick rate.
      -- The clock gives us an alert once every minute. 
      -- These slow it down to 5 and 10 minutes
      -- (MOTION and CLOCK, respectively). This allows us to
      -- trigger reads on a long timescale without having to
      -- play games with the alarm on the Chronodot.
      signal.delta (tick?, motion.tick!, clock.tick!)
      n.minute.ticker (MOTION.READ.MINUTES, motion.tick?, motion.ok!)
      n.minute.ticker (CLOCK.READ.MINUTES, clock.tick?, read.clock!)
      
      -- This process just forces the issue at startup and 
      -- triggers a reading.
      trigger.initial.reading (read.init!)
      
      -- When the motion sensor detects motion, it signals the 
      -- throttle process. The throttle only allows an event 
      -- through if we have received a motion.ok? message. This only
      -- happens once every MOTION.READ.MINUTES.
      motion (movement!)
      motion.throttle (movement?, motion.ok?, read.movement!)
      
      display (d?)
:
