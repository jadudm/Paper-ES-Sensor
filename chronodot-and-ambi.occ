#INCLUDE "plumbing.module"
#INCLUDE "twi2.module"


PROC status ()
  BYTE status:
  SEQ
    get.twi.status(status)
    serial.write.string(TX0, "[s] ")
    serial.write.int(TX0, INT status)
    serial.write.string(TX0, "*n")
:

PROC write.byte (VAL BYTE dev, VAL BYTE addr, VAL BYTE b)
  SEQ
    --serialWrite("-> ")
    --serialWriteInt(INT addr)
    --serialWrite("*n") 
    twi.init() 
    twi.start()
    --status()
    twi.set.tx.addr((dev << 1))
    --status()
    twi.tx(addr)
    --status()
    twi.tx(b)
    --status()
    twi.stop()
:    

PROC read.byte (VAL BYTE dev, VAL BYTE addr, BYTE b)
  SEQ
    --serialWrite("<- ")
    --serialWriteInt(INT addr)
    --serialWrite("*n") 
    twi.init()
    twi.start()
    --status()
    twi.set.tx.addr((dev << 1))
    --status()
    twi.tx(addr)
    --status()
    --serialWrite("RESTART*n")
    twi.start()
    --status()
    --serialWrite("RX ADDR*n")
    twi.set.rx.addr((dev << 1) \/ 1)
    --status()
    --serialWrite("READ BYTE*n")
    twi.read.byte(TWI.NACK, b)
    --status()
    twi.stop()
:

PROC read.bytes (VAL BYTE dev, VAL BYTE addr, []BYTE bs)
  SEQ
    --serialWrite("<- ")
    --serialWriteInt(INT addr)
    --serialWrite("*n") 
    twi.init()
    twi.start()
    --status()
    twi.set.tx.addr((dev << 1))
    --status()
    twi.tx(addr)
    --status()
    --serialWrite("RESTART*n")
    twi.start()
    --status()
    --serialWrite("RX ADDR*n")
    twi.set.rx.addr((dev << 1) \/ 1)
    --status()
    --serialWrite("READ BYTE*n")
    SEQ i = 0 FOR ((SIZE bs) - 1)
      twi.read.byte(TWI.ACK, bs[i])
    twi.read.byte(TWI.NACK, bs[(SIZE bs) - 1])
    --status()
    twi.stop()
:
INT FUNCTION bcd.to.dec (VAL INT bcd)
  INT result:
  VALOF
    SEQ
      result := (((bcd BITAND #F0) >> 4) * 10) + (bcd BITAND #0F)
    RESULT result
:

PROC current.time (CHAN SIGNAL s!, CHAN [3]INT reading!)
  [3]INT hms:
  [3]BYTE b:
  #PRAGMA DEFINED b
  WHILE TRUE
    SEQ
      read.bytes(#68, #00, b)
      hms[0] := ((((INT b[0]) BITAND #F0) >> 4) * 10) + ((INT b[0]) BITAND #0F)
      hms[1] := ((((INT b[1]) BITAND #F0) >> 4) * 10) + ((INT b[1]) BITAND #0F)
      hms[2] := ((((INT b[2]) BITAND #30) >> 4) * 10) + ((INT b[2]) BITAND #0F)
      reading ! hms
      s ! SIGNAL
:

PROC zero.clock (VAL BOOL reset)
  IF
    reset
      SEQ
        write.byte(#68, #00, #00)
        write.byte(#68, #01, #00)
        write.byte(#68, #02, #00)
    TRUE
      SKIP
:

PROC display (CHAN [3]INT time?, CHAN INT light?)
  [3]INT hms:
  INT lv:
  WHILE TRUE
    SEQ
      time ? hms
      light ? lv
      serial.write.string (TX0, "T ")
      SEQ i = 2 FOR 3 STEP -1    
        SEQ
          serial.write.int (TX0, hms[i])
          serial.write.string (TX0, " ")
      serial.write.string (TX0, " L ")
      serial.write.int (TX0, lv)
      serial.write.string (TX0, "*n")
:

PROC main ()
  SEQ
    serial.setup(TX0, 57600)
    zero.clock(FALSE)

    CHAN SIGNAL s:
    CHAN [3]INT time:
    CHAN INT light:
    PAR
      current.time (s!, time!)
      adc (A0, VCC, s?, light!)
      display (time?, light?)
:      
   
